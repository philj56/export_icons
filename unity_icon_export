#!/bin/bash

################################################################################
#
# export_icons - Inkscape Icon Export Script for Mobile Apps
#
# The MIT License (MIT)
#
# Copyright for portions of unity_icon_export are held by Soichiro Kashima, 2013
# as part of project export_icons. All other copyright for unity_icon_export are 
# held by Philip Jones, 2017.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
################################################################################

VERSION=1.0
INKSCAPE=`which inkscape`
OS_TYPE_ANDROID=Android
OS_TYPE_IOS=iOS
OS_TYPE_STANDALONE=Standalone
OS_TYPE_ALL=All

function help() {
  echo "unity_icon_export - Inkscape Icon Export Script for Unity"
  echo "Version ${VERSION}"
  echo ""
  echo "Usage: $0 -i INPUT_FILE -o OUTPUT_DIR [-f] [-t OS_TYPE] [-b BASE_NAME] [-s BASE_SIZE] [-v]"
  echo "  -i INPUT_FILE"
  echo "    Input Inkscape file. Required."
  echo ""
  echo "  -o OUTPUT_DIR"
  echo "    Directory to locate output files. Required."
  echo "    This directory will be automatically created."
  echo ""
  echo "  -f"
  echo "    Optional."
  echo "    If set, overwrite existing output directories"
  echo "    ('OUTPUT_DIR/${OS_TYPE_ANDROID}','OUTPUT_DIR/${OS_TYPE_IOS}','OUTPUT_DIR/${OS_TYPE_STANDALONE}')."
  echo "    Otherwise, skip if there are any existing output directories."
  echo ""
  echo "  -t OS_TYPE"
  echo "    Specifies target mobile OS. Optional."
  echo "    Valid values: ${OS_TYPE_ANDROID} | ${OS_TYPE_IOS} | ${OS_TYPE_STANDALONE} | ${OS_TYPE_ALL}"
  echo "    Optional. Default is '${OS_TYPE_ALL}'."
  echo ""
  echo "  -p"
  echo "    Inkscape path."
  echo ""
  echo "  -v"
  echo "    Enable verbose output."
  echo ""
}

function log() {
  if [ -n "${verbose}" ]; then
    echo $1
  fi
}

function export_png() {
  local input_file=$1
  local output_file=$2
  local size=$3
  local output_export_dir=`dirname ${output_file}`
  if [ ! -d "${output_export_dir}" ]; then
    mkdir -p "${output_export_dir}"
  fi
  log "Exporting input:${input_file} output:${output_file} width:${size}"
  "${INKSCAPE}" -z -C --file="${input_file}" --export-png="${output_file}" -w ${size} > /dev/null 2>&1
}

while getopts b:i:o:fs:t:vp: flag
do
  case ${flag} in
    i)
      input_file=${OPTARG};;
    f)
      force_overwrite=1;;
    o)
      output_dir=${OPTARG};;
    t)
      os_type=${OPTARG};;
    v)
      verbose=1;;
    p)
      INKSCAPE=${OPTARG};;
  esac
done

# Check inkscape command line binary
if [ ! -f "${INKSCAPE}" ]; then
  echo "Inkscape not found."
  exit 1
fi

# Check arguments
if [ -z "${input_file}" -o -z "${output_dir}" ]; then
  help
  exit 1
fi
if [ ! -f "${input_file}" ]; then
  echo "Input file not found: ${input_file}"
  exit 1
fi
input_basename=${input_file##*/}
extension=${input_basename##*.}
if [ "x${extension}" != "xsvg" ]; then
  echo "WARNING: Extension ${extension} is not tested."
fi

if [ -z ${os_type} ]; then
  os_type=${OS_TYPE_ALL}
fi
if [ "${os_type}" != "${OS_TYPE_ANDROID}" -a "${os_type}" != "${OS_TYPE_IOS}" -a "${os_type}" != "${OS_TYPE_STANDALONE}" -a "${os_type}" != "${OS_TYPE_ALL}" ]; then
  echo "WARNING: OS_TYPE ${os_type} is not valid. Use '${OS_TYPE_ALL}'."
  os_type=${OS_TYPE_ALL}
fi

# Create output directories
if [ ! -d "${output_dir}" ]; then
  mkdir -p "${output_dir}"
fi

log "Using inkscape binary: ${INKSCAPE}"

if [ "${os_type}" = "${OS_TYPE_ANDROID}" -o "${os_type}" = "${OS_TYPE_ALL}" ]; then

  if [ -z "${force_overwrite}" ]; then
    if [ -e "${output_dir}/${OS_TYPE_ANDROID}" ]; then
      echo "${output_dir}/${OS_TYPE_ANDROID} already exists."
      exit 1
    fi
  fi
  if [ ${execute_android} -eq 1 ]; then
    if [ ! -d "${output_dir}/${OS_TYPE_ANDROID}" ]; then
      mkdir -p "${output_dir}/${OS_TYPE_ANDROID}"
    fi
    
    export_png ${input_file} ${output_dir}/${OS_TYPE_ANDROID}/192.png 192
    export_png ${input_file} ${output_dir}/${OS_TYPE_ANDROID}/144.png 144
    export_png ${input_file} ${output_dir}/${OS_TYPE_ANDROID}/96.png 96
    export_png ${input_file} ${output_dir}/${OS_TYPE_ANDROID}/72.png 72
    export_png ${input_file} ${output_dir}/${OS_TYPE_ANDROID}/48.png 48
    export_png ${input_file} ${output_dir}/${OS_TYPE_ANDROID}/36.png 36
  fi
fi

if [ "${os_type}" = "${OS_TYPE_STANDALONE}" -o "${os_type}" = "${OS_TYPE_ALL}" ]; then

  if [ -z "${force_overwrite}" ]; then
    if [ -e "${output_dir}/${OS_TYPE_STANDALONE}" ]; then
      echo "${output_dir}/${OS_TYPE_STANDALONE} already exists."
      exit 1
    fi
  fi

  if [ ${execute_ios} -eq 1 ]; then
    if [ ! -d "${output_dir}/${OS_TYPE_STANDALONE}" ]; then
      mkdir -p "${output_dir}/${OS_TYPE_STANDALONE}"
    fi
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/1024.png 1024
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/512.png 512
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/256.png 256
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/128.png 128
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/48.png 48
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/32.png 32
    export_png ${input_file} ${output_dir}/${OS_TYPE_STANDALONE}/16.png 16
    export_png ${input_file} ${output_dir}/icon_default.png 1024
  fi
fi

if [ "${os_type}" = "${OS_TYPE_IOS}" -o "${os_type}" = "${OS_TYPE_ALL}" ]; then

  if [ -z "${force_overwrite}" ]; then
    if [ -e "${output_dir}/${OS_TYPE_IOS}" ]; then
      echo "${output_dir}/${OS_TYPE_IOS} already exists."
      exit 1
    fi
  fi

  if [ ${execute_ios} -eq 1 ]; then
    if [ ! -d "${output_dir}/${OS_TYPE_IOS}" ]; then
      mkdir -p "${output_dir}/${OS_TYPE_IOS}"
    fi

    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/180.png 180
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/167.png 167
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/152.png 152
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/144.png 144
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/120.png 120
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/114.png 114
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/76.png 76
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/72.png 72
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/57.png 57
    # Spotlight icons
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/120.png 120
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/80.png 80
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/40.png 40
    # Settings icons
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/87.png 87
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/58.png 58
    export_png ${input_file} ${output_dir}/${OS_TYPE_IOS}/29.png 29
    
  fi
fi

exit 0
